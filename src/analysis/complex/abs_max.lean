/-
Copyright (c) 2022 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import analysis.complex.cauchy_integral
import analysis.convex.integral
import analysis.calculus.fderiv_analytic

/-!
# Maximum modulus principle and Liouville's Theorem

In this file we prove several versions of the maximum modulus principle and Liouville's Theorem.
-/

open topological_space metric set filter asymptotics function measure_theory
open_locale topological_space filter nnreal real

universe u
variables {E : Type u} [normed_group E] [normed_space ‚ÑÇ E] [measurable_space E] [borel_space E]
  [second_countable_topology E] [complete_space E]

namespace complex

/-- If `f` is complex differentiable on a closed disc with center `c` and radius `R > 0`, then
`f' c` can be represented as an integral over the corresponding circle.

TODO: add a version for `w ‚àà metric.ball c R`.

TODO: add a version for higher derivatives. -/
lemma deriv_eq_smul_circle_integral {R : ‚Ñù} {c : ‚ÑÇ} {f : ‚ÑÇ ‚Üí E} (hR : 0 < R)
  (hc : continuous_on f (closed_ball c R)) (hd : differentiable_on ‚ÑÇ f (ball c R)) :
  deriv f c = (2 * œÄ * I : ‚ÑÇ)‚Åª¬π ‚Ä¢ ‚àÆ z in C(c, R), (z - c) ^ (-2 : ‚Ñ§) ‚Ä¢ f z :=
begin
  lift R to ‚Ñù‚â•0 using hR.le,
  refine (has_fpower_series_on_ball_of_continuous_on_of_differentiable_on
    hc hd hR).has_fpower_series_at.deriv.trans _,
  simp only [cauchy_power_series_apply, one_div, zpow_neg‚ÇÄ, pow_one, smul_smul,
    zpow_two, mul_inv‚ÇÄ]
end

/-- If `f` is continuous on a closed disc of radius `R`, is complex differentiable on its interior,
and its values on the boundary circle of this disc are bounded from above by `C`, then the norm of
its derivative at the center is at most `C / R`. -/
lemma norm_deriv_le_of_forall_mem_sphere_norm_le {c : ‚ÑÇ} {R C : ‚Ñù} {f : ‚ÑÇ ‚Üí E} (hR : 0 < R)
  (hc : continuous_on f (closed_ball c R)) (hd : differentiable_on ‚ÑÇ f (ball c R))
  (hC : ‚àÄ z ‚àà sphere c R, ‚à•f z‚à• ‚â§ C) :
  ‚à•deriv f c‚à• ‚â§ C / R :=
have ‚àÄ z ‚àà sphere c R, ‚à•(z - c) ^ (-2 : ‚Ñ§) ‚Ä¢ f z‚à• ‚â§ C / (R * R),
  from Œª z (hz : abs (z - c) = R), by simpa [norm_smul, hz, zpow_two, ‚Üê div_eq_inv_mul]
    using (div_le_div_right (mul_pos hR hR)).2 (hC z hz),
calc ‚à•deriv f c‚à• = ‚à•(2 * œÄ * I : ‚ÑÇ)‚Åª¬π ‚Ä¢ ‚àÆ z in C(c, R), (z - c) ^ (-2 : ‚Ñ§) ‚Ä¢ f z‚à• :
  congr_arg norm (deriv_eq_smul_circle_integral hR hc hd)
... ‚â§ R * (C / (R * R)) :
  circle_integral.norm_two_pi_I_inv_smul_integral_le_of_norm_le_const hR.le this
... = C / R : by rw [mul_div_comm, div_self_mul_self', div_eq_mul_inv]

/-- A complex differentiable bounded function is a constant. -/
lemma apply_eq_apply_of_differentiable_of_bounded {f : ‚ÑÇ ‚Üí E} (hf : differentiable ‚ÑÇ f)
  (hb : bounded (range f)) (z w : ‚ÑÇ) : f z = f w :=
begin
  suffices : ‚àÄ c, deriv f c = 0, from is_const_of_deriv_eq_zero hf this z w,
  clear z w, intro c,
  obtain ‚ü®C, C‚ÇÄ, hC‚ü© : ‚àÉ C > (0 : ‚Ñù), ‚àÄ z, ‚à•f z‚à• ‚â§ C,
  { rcases bounded_iff_forall_norm_le.1 hb with ‚ü®C, hC‚ü©,
    exact ‚ü®max C 1, lt_max_iff.2 (or.inr zero_lt_one),
      Œª z, (hC (f z) (mem_range_self _)).trans (le_max_left _ _)‚ü© },
  refine norm_le_zero_iff.1 (le_of_forall_le_of_dense $ Œª Œµ Œµ‚ÇÄ, _),
  calc ‚à•deriv f c‚à• ‚â§ C / (C / Œµ) :
    norm_deriv_le_of_forall_mem_sphere_norm_le (div_pos C‚ÇÄ Œµ‚ÇÄ) hf.continuous.continuous_on
      hf.differentiable_on (Œª z _, hC z)
  ... = Œµ : div_div_cancel' C‚ÇÄ.lt.ne'
end

/-- A complex differentiable bounded function is a constant. -/
lemma exists_const_forall_eq_of_differentiable_of_bounded {f : ‚ÑÇ ‚Üí E} (hf : differentiable ‚ÑÇ f)
  (hb : bounded (range f)) : ‚àÉ c, ‚àÄ z, f z = c :=
‚ü®f 0, Œª z, apply_eq_apply_of_differentiable_of_bounded hf hb _ _‚ü©

/-- A complex differentiable bounded function is a constant. -/
lemma exists_eq_const_of_differentiable_of_bounded {f : ‚ÑÇ ‚Üí E} (hf : differentiable ‚ÑÇ f)
  (hb : bounded (range f)) : ‚àÉ c, f = const ‚ÑÇ c :=
(exists_const_forall_eq_of_differentiable_of_bounded hf hb).imp $ Œª c, funext

lemma norm_eq_norm_of_differentiable_on_of_is_max_on_of_closed_ball_subset {f : ‚ÑÇ ‚Üí E} {s : set ‚ÑÇ}
  {z w : ‚ÑÇ} (hd : differentiable_on ‚ÑÇ f s) (hz : is_max_on (norm ‚àò f) s z)
  (hsub : closed_ball z (dist w z) ‚äÜ s) :
  ‚à•f w‚à• = ‚à•f z‚à• :=
begin
  set r := dist w z,
  have hw_mem : w ‚àà closed_ball z r, from mem_closed_ball.2 le_rfl,
  refine (is_max_on_iff.1 hz _ (hsub hw_mem)).antisymm (not_lt.1 _),
  rintro hw_lt : ‚à•f w‚à• < ‚à•f z‚à•,
  have hr : 0 < r, from dist_pos.2 (Œª h, hw_lt.ne $ h ‚ñ∏ rfl),
  have hsub' : sphere z r ‚äÜ s, from sphere_subset_closed_ball.trans hsub,
  have hne : ‚àÄ Œ∂ ‚àà sphere z r, Œ∂ ‚â† z,
    from Œª Œ∂ hŒ∂, ne_of_mem_of_not_mem hŒ∂ (ne_of_lt $ (dist_self z).symm ‚ñ∏ hr),
  have hcont : continuous_on (Œª Œ∂, (Œ∂ - z)‚Åª¬π ‚Ä¢ f Œ∂) (sphere z r),
    from ((continuous_on_id.sub continuous_on_const).inv‚ÇÄ $
      Œª Œ∂ hŒ∂, sub_ne_zero.2 (hne Œ∂ hŒ∂)).smul (hd.continuous_on.mono hsub'),
  have hle : ‚àÄ Œ∂ ‚àà sphere z r, ‚à•(Œ∂ - z)‚Åª¬π ‚Ä¢ f Œ∂‚à• ‚â§ ‚à•f z‚à• / r,
  { rintros Œ∂ (hŒ∂ : abs (Œ∂ - z) = r),
    simpa [norm_smul, hŒ∂, ‚Üê div_eq_inv_mul] using (div_le_div_right hr).2 (hz (hsub' hŒ∂)) },
  have hlt : ‚à•(w - z)‚Åª¬π ‚Ä¢ f w‚à• < ‚à•f z‚à• / r,
    by simpa [norm_smul, ‚Üê div_eq_inv_mul] using (div_lt_div_right hr).2 hw_lt,
  have : ‚à•‚àÆ Œ∂ in C(z, r), (Œ∂ - z)‚Åª¬π ‚Ä¢ f Œ∂‚à• < 2 * œÄ * r * (‚à•f z‚à• / r),
    from circle_integral.norm_integral_lt_of_norm_le_const_of_lt hr hcont hle ‚ü®w, rfl, hlt‚ü©,
  refine this.ne _,
  rw circle_integral_sub_inv_smul_of_differentiable_on (mem_ball_self hr) (hd.mono hsub),
  field_simp [norm_smul, hr.ne', abs_of_pos real.pi_pos],
  ac_refl
end

lemma norm_eventually_eq_of_eventually_differentiable_at_of_is_local_max {f : ‚ÑÇ ‚Üí E} {c : ‚ÑÇ}
  (hd : ‚àÄ·∂† z in ùìù c, differentiable_at ‚ÑÇ f z) (hc : is_local_max (norm ‚àò f) c) :
  ‚àÄ·∂† y in ùìù c, ‚à•f y‚à• = ‚à•f c‚à• :=
begin
  rcases nhds_basis_closed_ball.eventually_iff.1 (hd.and hc) with ‚ü®r, hr‚ÇÄ, hr‚ü©,
  exact nhds_basis_closed_ball.eventually_iff.2 ‚ü®r, hr‚ÇÄ, Œª w hw,
    norm_eq_norm_of_differentiable_on_of_is_max_on_of_closed_ball_subset
      (Œª z hz, (hr hz).1.differentiable_within_at) (Œª z hz, (hr hz).2)
      (closed_ball_subset_closed_ball hw)‚ü©
end

lemma is_open_set_of_mem_nhds_and_is_max_on_norm {f : ‚ÑÇ ‚Üí E} {s : set ‚ÑÇ}
  (hd : differentiable_on ‚ÑÇ f s) :
  is_open {z | s ‚àà ùìù z ‚àß is_max_on (norm ‚àò f) s z} :=
begin
  refine is_open_iff_mem_nhds.2 (Œª z hz, (eventually_eventually_nhds.2 hz.1).and _),
  replace hd : ‚àÄ·∂† w in ùìù z, differentiable_at ‚ÑÇ f w, from hd.eventually_differentiable_at hz.1,
  exact (norm_eventually_eq_of_eventually_differentiable_at_of_is_local_max hd $
    (hz.2.is_local_max hz.1)).mono (Œª x hx y hy, le_trans (hz.2 hy) hx.ge)
end

/-- **Maximum modulus principle**: if `f : ‚ÑÇ ‚Üí E` is complex differentiable on a nonempty compact
set `s`, then there exists a point `z ‚àà frontier s` such that `Œª z, ‚à•f z‚à•` takes it maximum value on
`s` at `z`. -/
lemma exists_mem_frontier_is_max_on_norm {f : ‚ÑÇ ‚Üí E} {s : set ‚ÑÇ} (hs : is_compact s)
  (hne : s.nonempty) (hd : differentiable_on ‚ÑÇ f s) :
  ‚àÉ z ‚àà frontier s, is_max_on (norm ‚àò f) s z :=
begin
  rcases hs.exists_forall_ge hne hd.continuous_on.norm with ‚ü®w, hws, hle‚ü©,
  rcases exists_mem_frontier_inf_dist_compl_eq_dist hws hs.ne_univ with ‚ü®z, hzs, hzw‚ü©,
  refine ‚ü®z, hzs, Œª x hx, (hle x hx).trans_eq _‚ü©,
  refine (norm_eq_norm_of_differentiable_on_of_is_max_on_of_closed_ball_subset hd hle _).symm,
  calc closed_ball w (dist z w) ‚äÜ closed_ball w (inf_dist w s·∂ú) :
    closed_ball_subset_closed_ball (by rw [hzw, dist_comm])
  ... ‚äÜ closure s : closed_ball_inf_dist_compl_subset_closure hws hs.ne_univ
  ... = s : hs.is_closed.closure_eq
end

/-- **Maximum modulus principle**: if `f : ‚ÑÇ ‚Üí E` is complex differentiable on a compact set `s` and
`‚à•f z‚à• ‚â§ C` for any `z ‚àà frontier s`, then the same is true for any `z ‚àà s`. -/
lemma norm_le_of_forall_mem_frontier_norm_le {f : ‚ÑÇ ‚Üí E} {s : set ‚ÑÇ} (hs : is_compact s)
  (hd : differentiable_on ‚ÑÇ f s) {C : ‚Ñù} (hC : ‚àÄ z ‚àà frontier s, ‚à•f z‚à• ‚â§ C) {z : ‚ÑÇ} (hz : z ‚àà s) :
  ‚à•f z‚à• ‚â§ C :=
let ‚ü®w, hws, hw‚ü© := exists_mem_frontier_is_max_on_norm hs ‚ü®z, hz‚ü© hd in le_trans (hw hz) (hC w hws)

end complex
